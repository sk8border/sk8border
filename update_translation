#!/usr/bin/env lua

-- pico8-table-string (https://github.com/benwiley4000/pico8-table-string)
-- if I ever publish that as a rock maybe we should just depend on it? whatever

-- these are globals in PICO-8
-- (don't need these lines there)
local sub = sub or string.sub
local tonum = tonum or tonumber

-- old deprecated separators: have been updated to valid P8SCII control characters
-- in order for minification with picotools to work

-- -- ASCII US "unit separator"
-- -- used to delimit both keys and values
-- local token_sep = '\31'

-- -- ASCII GS "group separator"
-- -- used to delimit the begining of a
-- -- subtable following a key
-- local subtable_start = '\29'

-- -- ASCII RS "record separator"
-- -- used to delimit the end of a subtable
-- local subtable_end = '\30'

-- new separators

-- P8SCII-compatible "Hollow square" (Japanese punctuation)
-- used to delimit both keys and values
local token_sep = '□'

-- P8SCII-compatible "Vertical rectangle" (Japanese punctuation)
-- used to delimit the begining of a
-- subtable following a key
local subtable_start = '▮'

-- P8SCII-compatible "Filled square" (Japanese punctuation)
-- used to delimit the end of a subtable
local subtable_end = '■'

function stringify_table(table)
  local str = ''
  for key, val in pairs(table) do
    str = str..key
    local t = type(val)
    if t == 'table' then
      str = str..subtable_start..stringify_table(val)..subtable_end
    else
      str = str..token_sep..val..token_sep
    end
  end
  return str
end

function serialize_table(table)
  local function escape(str)
    if type(str) ~= 'string' then
      return str
    end
    local new_str = ''
    for i = 1,#str do
      local char = sub(str, i, i)
      if char == '\'' then
        new_str = new_str..'\\\''
      else
        new_str = new_str..char
      end
    end
    return new_str
  end
  return '\''..escape(stringify_table(table))..'\''
end

-- thanks to https://helloacm.com/split-a-string-in-lua/
function split(s, delimiter)
  result = {}
  for match in (s..delimiter):gmatch("(.-)"..delimiter) do
    table.insert(result, match)
  end
  return result
end

-- encode to print with accents
-- inspired by work by zep
-- https://lexaloffle.com/bbs/?tid=34306
function encode_accents(str)
 local new_str = ""
 local i = 0
 while i <= #str do
  -- two byte compare string
  local c = sub(str,i,i+1)
  -- one byte default
  local e = sub(str,i,i)
  -- cedille ¸
  if c == "ç" then
   e="#c"
  -- aigu ˊ
  elseif c == "é" then
   e="|e"
  -- circonflexe ˆ
  elseif c == "â" then
   e="^a"
  elseif c == "ê" then
   e="^e"
  elseif c == "î" then
   e="^i"
  elseif c == "ô" then
   e="^o"
  elseif c == "û" then
   e="^u"
  -- grave ˋ
  elseif c == "à" then
   e="`a"
  elseif c == "è" then
   e="`e"
  elseif c == "ì" then
   e="`i"
  elseif c == "ò" then
   e="`o"
  elseif c == "ù" then
   e="`u"
  -- tréma ¨
  elseif c == "ë" then
   e="@e"
  elseif c == "ï" then
   e="@i"
  elseif c == "ü" then
   e='@u'
  end
  new_str=new_str..e
  if e ~= sub(str,i,i) then
    i = i + 1
  end
  i = i + 1
 end
 return new_str
end

function encode_table(table)
 for k,v in pairs(table) do
  if type(v) == "table" then
   encode_table(v)
  else
   table[k]=encode_accents(v)
  end
 end
end

-- do the thing

i18n_en = require "game_translations/en"
i18n_fr = require "game_translations/fr"

encode_table(i18n_en)
encode_table(i18n_fr)

before_delimiter = "-- generated_translations_begin\n"
after_delimiter = "-- generated_translations_end"

filename = "sk8border.p8"
f = io.open(filename)
if not f then
  error("ERROR: File "..filename.." not found")
end
p8_contents = f:read('*all')
f:close()

t1 = split(p8_contents, before_delimiter)
t2 = split(t1[2], after_delimiter)
before_translation = t1[1]
after_translation = t2[2]

translation_content = ''

translation_content = translation_content..'i18n_en=\n'
translation_content = translation_content..'table_from_string(\n'
translation_content = translation_content..' '..serialize_table(i18n_en)..'\n'
translation_content = translation_content..')\n'

translation_content = translation_content..'i18n_fr=\n'
translation_content = translation_content..'table_from_string(\n'
translation_content = translation_content..' '..serialize_table(i18n_fr)..'\n'
translation_content = translation_content..')\n'

out_str = before_translation..before_delimiter..translation_content
out_str = out_str..after_delimiter..after_translation

f = io.open(filename, "w")
if not f then
  error("ERROR: File "..filename.." could not be opened for write")
end
f:write(out_str)
f:close()
